// Generated by CoffeeScript 1.4.0
(function() {
  var DEFAULT_ENCODING, EXTRACT_PARAMS, EventEmitter, LIST_PARAMS, MAX_BUFFER_SIZE, RAR_ID, RAR_TOOL, RarFile, VERSION, VIEW_TOOL, exec, fs, isRarFile, spawn,
    _this = this,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  spawn = require('child_process').spawn;

  exec = require('child_process').exec;

  EventEmitter = require('events').EventEmitter;

  VERSION = '0.1.2';

  RAR_ID = new Buffer('Rar!\x1a\x07\x00');

  RAR_TOOL = 'unrar';

  LIST_PARAMS = ['lb'];

  EXTRACT_PARAMS = ['p', '-y', '-idq'];

  VIEW_TOOL = 'kview';

  MAX_BUFFER_SIZE = 1024 * 1024 * 10;

  DEFAULT_ENCODING = 'binary';

  isRarFile = function(filename, cb) {
    var data, n, ret, _i, _ref;
    try {
      data = fs.readFileSync(filename);
      ret = true;
      for (n = _i = 0, _ref = RAR_ID.length; 0 <= _ref ? _i < _ref : _i > _ref; n = 0 <= _ref ? ++_i : --_i) {
        if (data[n] !== RAR_ID[n]) {
          ret = false;
          break;
        }
      }
      if (cb) {
        cb(null, ret);
      }
      return ret;
    } catch (e) {
      if (cb) {
        return cb(e, null);
      } else {
        throw e;
      }
    }
  };

  RarFile = (function(_super) {

    __extends(RarFile, _super);

    RarFile.VERSION = VERSION;

    function RarFile(archiveName) {
      this.archiveName = archiveName;
      this.toString = __bind(this.toString, this);

      this.showFile = __bind(this.showFile, this);

      this.readFile = __bind(this.readFile, this);

      this.readStream = __bind(this.readStream, this);

      this._loadNames = __bind(this._loadNames, this);

      if (!this.archiveName) {
        throw new Error('Must provide a filename.');
      }
      if (!isRarFile(this.archiveName)) {
        throw new Error("" + this.archiveName + " is not a RAR archive");
      }
      this.debugMode = false;
      this.viewTool = VIEW_TOOL;
      this._loadedList = false;
      this.names = [];
      this._loadNames();
    }

    RarFile.prototype._loadNames = function() {
      var executable, params,
        _this = this;
      params = "" + (LIST_PARAMS.join(' ')) + " " + this.archiveName;
      executable = "" + RAR_TOOL + " " + params;
      if (this.debugMode) {
        console.log("Running << " + executable + " >>");
      }
      exec(executable, {
        encoding: "utf8",
        maxBuffer: MAX_BUFFER_SIZE
      }, function(err, stdout, stderr) {
        var f;
        _this.names = (function() {
          var _i, _len, _ref, _results;
          _ref = stdout.split('\n');
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            f = _ref[_i];
            if (f && f !== 'undefined') {
              _results.push(f);
            }
          }
          return _results;
        })();
        _this._loadedList = true;
        return _this.emit('ready', _this);
      });
      return this;
    };

    RarFile.prototype.readStream = function(filename) {
      var p, params, unrar;
      params = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = EXTRACT_PARAMS.length; _i < _len; _i++) {
          p = EXTRACT_PARAMS[_i];
          _results.push(p);
        }
        return _results;
      })();
      params.push(this.archiveName);
      params.push(filename);
      if (this.debugMode) {
        console.log("Running << " + RAR_TOOL + " " + (JSON.stringify(params)) + " >>");
      }
      unrar = spawn(RAR_TOOL, params);
      unrar.stdout.setEncoding('binary');
      return unrar.stdout;
    };

    RarFile.prototype.readFile = function(filename, cb) {
      var executable, params,
        _this = this;
      params = "" + (EXTRACT_PARAMS.join(' ')) + " " + this.archiveName + " " + filename;
      executable = "" + RAR_TOOL + " " + params;
      if (this.debugMode) {
        console.log("Running << " + executable + " >>");
      }
      return exec(executable, {
        encoding: 'binary',
        maxBuffer: MAX_BUFFER_SIZE
      }, function(err, stdout, stderr) {
        return cb(err, stdout);
      });
    };

    RarFile.prototype.showFile = function(filename) {
      var _this = this;
      return this.readFile(filename, function(err, data) {
        var show;
        if (err) {
          console.log(err.toString());
          return;
        }
        fs.writeFileSync(filename, data, 'binary');
        console.log("Length of extracted data: " + data.length);
        try {
          return show = spawn(_this.viewTool, [filename]);
        } catch (e) {
          return console.log(e.toString());
        }
      });
    };

    RarFile.prototype.toString = function() {
      return JSON.stringify({
        names: this.names
      });
    };

    return RarFile;

  })(EventEmitter);

  module.exports = {
    VERSION: VERSION,
    isRarFile: isRarFile,
    RarFile: RarFile
  };

}).call(this);
